mar2020_History_TMPDB.txt

### download pdb files from OPM, extract TM domain from definitions file from OPM website
# ugly new version of files:  subunits-2020-03-22.csv

# removed - 6kac EM PSII super complex (random poly Ala helices, canâ€™t parse)
# Pick those with decent resolution; write TM-only PDBs, and write fasta

>> python bin/downloadPDBs_OPM_v2.py  subunits-2020-03-22.csv

# 2489 potentially redundant

## find equivalent chains in each PDB

>> python bin/findChainGroups.py suitable_redundant_pdbByChain.txt selectedOPM/ selectedfasta/

## Do pairwise sequence comparison 

>> python bin/reduceRendundancy.py pdb_chainGroup_data.cPickle 0.4

#
# 277 non-redundant in set
perTMsegment seqID (if < .90), median = 0.2000 mean = 0.2000 std = 3.9623


# write the pdbs to file, including the unique quaternary interfaces

>> python bin/cleanAndWriteDataBase.py pdb_chainGroup_data.cPickle 40%_nonRedundant_finalPdbs.txt selectedOPM/ selectedfasta/

A 5616 0.106
C 807 0.015
E 927 0.017
D 701 0.013
G 3944 0.074
F 4322 0.081
I 5429 0.102
H 539 0.01
K 1094 0.021
M 1899 0.036
L 8303 0.156
N 1211 0.023
Q 922 0.017
P 1504 0.028
S 3024 0.057
R 1344 0.025
T 2775 0.052
W 1336 0.025
V 5268 0.099
Y 2175 0.041


>> python bin/annotate_finalPDBs.py 40%_nonRedundant_finalPdbs.txt selectedHeaders/ dataTypes_pdbSet.txt  > 40%_nonRedundant_finalPdbs_byMethod.txt


ELECTRON MICROSCOPY 23
X-RAY DIFFRACTION 254

# the result is 277 unique PDBs, which have 300 unique chain interfaces. 

Transfer data to gpu
> for i in *.pdb; do createPDS --type target --pdb $i; done
> for i in /home/gpu/tmPDB_mar2020/40%%master-nr-TMdatabase_bychain/*.pds; do echo $i >> list.txt; done

master input -targetList: /home/gpu/tmPDB_mar2020/40%%master-nr-TMdatabase_bychain/list.txt
